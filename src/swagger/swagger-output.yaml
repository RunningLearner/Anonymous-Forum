openapi: "3.0.0"

info:
  title: Board API
  description: RESTful API Board Server
  version: 1.0.0

basePath: "/"

schemes:
  - http

paths:
  /posts/:
    get:
      tags:
        - /posts
      description: 게시판 게시글 여러 건 불러오기
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: string
                  example: Team G
                perPage:
                  type: string
                  example: 우리는 Team G입니다!
              required:
                - page
                - perPage
      responses:
        "200":
          description: OK
        "403":
          description: "{userRole} doesn't have a Permission to read ${postType}"
        "500":
          description: "Server Error"
    post:
      tags:
        - /posts
      description: 게시판 게시글 작성하기
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Team G
                content:
                  type: string
                  example: 우리는 Team G입니다!
                password:
                  type: string
                  example: free
              required:
                - title
                - content
                - password
      responses:
        "201":
          description: "게시글 생성이 완료되었습니다."
        "400":
          description: "Post values cannot be empty"
        "403":
          description: "${userRole} doesn't have a Permission to read ${postType}"
        "404":
          description: "This postType doesn't exist in posts.type"
        "500":
          description: "Server Error"
  /posts/{id}:
    get:
      tags:
        - /posts
      description: 게시판 게시글 단건 불러오기
      parameters:
        - name: id
          in: path
          required: true
          type: number
      responses:
        "200":
          description: OK
        "404":
          description: "The requested URL /${postId} was not found on this server."
        "500":
          description: "Server Error"
    patch:
      tags:
        - /posts
      description: 게시판 게시글 수정하기
      parameters:
        - id: id
          in: path
          required: true
          type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Team G
                content:
                  type: string
                  example: 우리는 Team G입니다!
                password:
                  type: string
                  example: free
              required:
                - title
                - content
                - password
      responses:
        "200":
          description: OK
        "401":
          description: "The requested URL /${postId} was not found on this server."
        "403":
          description: "Doesn't have a Permission to update"
        "500":
          description: "Server Error"
    delete:
      tags:
        - /posts
      description: 자유 게시판 게시글 삭제하기
      parameters:
        - name: id
          in: path
          required: true
          type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: free
              required:
                - password
      responses:
        "200":
          description: OK
        "403":
          description: "{userRole} doesn't have a Permission to read ${postType}"
        "404":
          description: "Doesn't have a Permission to update"
        "500":
          description: "Server Error"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      in: header
      bearerFormat: JWT
